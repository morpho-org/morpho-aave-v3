name: Forge tests
description: Given a network, compiles the contracts & runs the full forge test suite

inputs:
  network:
    description: The network on which to run the forge test suite.
    required: true
  alchemyKey:
    description: The Alchemy key giving access to a private RPC.
    required: false
  codecovToken:
    description: The Codecov token used to upload coverage report.
    required: false
  coverageThreshold:
    description: The coverage threshold below which to fail the action.
    required: false

runs:
  using: composite
  steps:
    - uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: yarn

    - name: Install lcov
      if: ${{ inputs.codecovToken != '' }}
      run: sudo apt-get install -y lcov
      shell: bash

    - name: Install Foundry
      uses: onbjerg/foundry-toolchain@v1
      with:
        version: nightly

    - name: Foundry compilation cache
      uses: actions/cache@v3
      with:
        path: |
          cache
          out
        key: ${{ github.base_ref || github.ref_name }}-forge-test-${{ inputs.network }} # always keep compiled contracts from base branch

    - name: Run unit tests
      run: make test-unit
      shell: bash
      env:
        NETWORK: ${{ inputs.network }}
        ALCHEMY_KEY: ${{ inputs.alchemyKey }}
        FOUNDRY_FUZZ_RUNS: 16384

    - name: Run internal tests
      run: make test-internal
      shell: bash
      env:
        NETWORK: ${{ inputs.network }}
        ALCHEMY_KEY: ${{ inputs.alchemyKey }}
        FOUNDRY_FUZZ_RUNS: 64

    - name: Run integration tests & create gas report
      run: set -o pipefail && make gas-report | tee ${{ inputs.network }}.gasreport.ansi
      shell: bash
      env:
        NETWORK: ${{ inputs.network }}
        ALCHEMY_KEY: ${{ inputs.alchemyKey }}
        FOUNDRY_FUZZ_RUNS: 64
        # make fuzzing semi-deterministic to avoid noisy gas cost estimation
        # due to non-deterministic fuzzing, but keep it not always deterministic
        FOUNDRY_FUZZ_SEED: 0x${{ github.event.pull_request.base.sha || github.sha }}

    - name: Compare gas reports
      uses: Rubilmax/foundry-gas-diff@v3.13.3
      id: gas_diff
      with:
        match: src/Morpho.sol
        report: ${{ inputs.network }}.gasreport.ansi
        header: |
          # Morpho-AaveV3 gas diff (${{ inputs.network }})

    - name: Add gas diff to sticky comment
      if: github.event_name == 'pull_request' || github.event_name == 'pull_request_target'
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        delete: ${{ !steps.gas_diff.outputs.markdown }} # delete the comment in case changes no longer impacts gas costs
        message: ${{ steps.gas_diff.outputs.markdown }}

    - name: Generate lcov coverage report
      if: ${{ inputs.codecovToken != '' }}
      run: make coverage
      shell: bash
      env:
        NETWORK: ${{ inputs.network }}
        ALCHEMY_KEY: ${{ inputs.alchemyKey }}

    - name: Check coverage threshold
      if: ${{ inputs.coverageThreshold != '' }}
      run: npx lcov-total lcov.info --gte=${{ inputs.coverageThreshold }}
      shell: bash

    - name: Upload coverage to Codecov
      if: ${{ inputs.codecovToken != '' }}
      uses: codecov/codecov-action@v3
      with:
        token: ${{ inputs.codecovToken }}
        name: morpho-aave-v3-${{ inputs.network }}
        files: lcov.info
