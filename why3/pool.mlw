module PoolSetup
use export token.Token
exception SupplyCapReached (* Thrown when the supply cap is reached on the pool *)
end

module Pool
use export PoolSetup

type pool_storage = private {
    mutable suppliable: int; (* The amount that can be supplied on the pool before reaching the supply cap *)
    mutable supply_on_pool: int; (* The supply on pool of the Morpho contract *)
    mutable borrow_on_pool: int; (* The borrow on pool of the Morpho contract *)
} invariant {
    0 <= suppliable &&
    0 <= supply_on_pool &&
    0 <= borrow_on_pool
} by {
    suppliable = 0;
    supply_on_pool = 0;
    borrow_on_pool = 0;
}

val supply_to_pool (t: token_storage) (p: pool_storage) (amount: int) : unit
    requires { 0 <= amount }
    requires { get morpho t.balance >= amount }
    writes { p.supply_on_pool, p.suppliable, t.balance }
    ensures { get morpho t.balance = get morpho (old t).balance - amount }
    ensures { get pool t.balance = get pool (old t).balance + amount }
    ensures { p.supply_on_pool = (old p).supply_on_pool + amount }
    ensures { p.suppliable = (old p).suppliable - amount }
    raises { SupplyCapReached -> amount > (old p).suppliable }

val borrow_from_pool (t: token_storage) (p: pool_storage) (amount: int) : unit
    requires { 0 <= amount }
    requires { get pool t.balance >= amount }
    writes { p.borrow_on_pool, t.balance }
    ensures { get morpho t.balance = get morpho (old t).balance + amount }
    ensures { get pool t.balance = get pool (old t).balance - amount }
    ensures { p.borrow_on_pool = (old p).borrow_on_pool + amount }

val withdraw_from_pool (t: token_storage) (p: pool_storage) (amount: int) : unit
    requires { 0 <= amount }
    requires { get pool t.balance >= amount }
    writes { p.supply_on_pool, p.suppliable, t.balance }
    ensures { get morpho t.balance = get morpho (old t).balance + amount }
    ensures { get pool t.balance = get pool (old t).balance - amount }
    ensures { p.supply_on_pool = (old p).supply_on_pool - amount }
    ensures { p.suppliable = (old p).suppliable + amount }
    raises { Underflow -> amount > (old p).supply_on_pool }

val repay_to_pool (t: token_storage) (p: pool_storage) (amount: int) : unit
    requires { 0 <= amount <= p.borrow_on_pool }
    requires { get morpho t.balance >= amount }
    writes { p.borrow_on_pool, t.balance }
    ensures { get morpho t.balance = get morpho (old t).balance - amount }
    ensures { get pool t.balance = get pool (old t).balance + amount }
    ensures { p.borrow_on_pool = (old p).borrow_on_pool - amount }
    raises { Underflow -> amount > (old p).borrow_on_pool }
end

module PoolRealize
use export PoolSetup

type pool_storage = {
    mutable suppliable: int;
    mutable supply_on_pool: int;
    mutable borrow_on_pool: int;
} invariant {
    0 <= suppliable &&
    0 <= supply_on_pool &&
    0 <= borrow_on_pool
} by {
    suppliable = 0;
    supply_on_pool = 0;
    borrow_on_pool = 0;
}

let supply_to_pool (t: token_storage) (p: pool_storage) (amount: int) : unit
    requires { 0 <= amount }
    requires { get morpho t.balance >= amount }
    writes { p.supply_on_pool, p.suppliable, t.balance }
    ensures { get morpho t.balance = get morpho (old t).balance - amount }
    ensures { get pool t.balance = get pool (old t).balance + amount }
    ensures { p.supply_on_pool = (old p).supply_on_pool + amount }
    ensures { p.suppliable = (old p).suppliable - amount }
    raises { SupplyCapReached -> amount > (old p).suppliable }
=
    if amount > p.suppliable then raise SupplyCapReached;
    p.supply_on_pool <- p.supply_on_pool + amount;
    p.suppliable <- p.suppliable - amount;
    transfer_from t morpho pool amount

let borrow_from_pool (t: token_storage) (p: pool_storage) (amount: int) : unit
    requires { 0 <= amount }
    requires { get pool t.balance >= amount }
    writes { p.borrow_on_pool, t.balance }
    ensures { get morpho t.balance = get morpho (old t).balance + amount }
    ensures { get pool t.balance = get pool (old t).balance - amount }
    ensures { p.borrow_on_pool = (old p).borrow_on_pool + amount }
=
    p.borrow_on_pool <- p.borrow_on_pool + amount;
    transfer_from t pool morpho amount

let withdraw_from_pool (t: token_storage) (p: pool_storage) (amount: int) : unit
    requires { 0 <= amount }
    requires { get pool t.balance >= amount }
    writes { p.supply_on_pool, p.suppliable, t.balance }
    ensures { get morpho t.balance = get morpho (old t).balance + amount }
    ensures { get pool t.balance = get pool (old t).balance - amount }
    ensures { p.supply_on_pool = (old p).supply_on_pool - amount }
    ensures { p.suppliable = (old p).suppliable + amount }
    raises { Underflow -> amount > (old p).supply_on_pool }
=
    if amount > p.supply_on_pool then raise Underflow;
    p.supply_on_pool <- p.supply_on_pool - amount;
    p.suppliable <- p.suppliable + amount;
    transfer_from t pool morpho amount

let repay_to_pool (t: token_storage) (p: pool_storage) (amount: int) : unit
    requires { 0 <= amount <= p.borrow_on_pool }
    requires { get morpho t.balance >= amount }
    writes { p.borrow_on_pool, t.balance }
    ensures { get morpho t.balance = get morpho (old t).balance - amount }
    ensures { get pool t.balance = get pool (old t).balance + amount }
    ensures { p.borrow_on_pool = (old p).borrow_on_pool - amount }
    raises { Underflow -> amount > (old p).borrow_on_pool }
=
    if amount > p.borrow_on_pool then raise Underflow;
    p.borrow_on_pool <- p.borrow_on_pool - amount;
    transfer_from t morpho pool amount

clone Pool with type pool_storage, val supply_to_pool, val borrow_from_pool, val withdraw_from_pool, val repay_to_pool
end
